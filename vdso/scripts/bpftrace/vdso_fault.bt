#!/usr/bin/env bpftrace
/**
 * Rong Tao <rongtao@cestc.cn>
 * 2022.02.20
 * Tracing kprobe:vdso_fault
 *
 * Every process create will call 'vdso_fault' function
 */
#include <linux/kernel.h>
#include <linux/mm.h>
#if defined(CONFIG_X86_64)
// see arch/x86/include/asm/vdso.h
struct vdso_image {
	void *data;
	unsigned long size;   /* Always a multiple of PAGE_SIZE */
};
#else
# error "Unsupport arch, just x86_64 right now."
#endif

BEGIN
{
	printf("Tracing kprobe:vdso_fault, hit ctrl-C to end.\n");
	printf("%-8s %-16s %-16s %-16s %-16s\n",
		 "PID", "COMM", "KADDR", "VM_START", "VM_END");
}

kprobe:vdso_fault
{
	$vma = (struct vm_area_struct *)arg1;
	$vmf = (struct vm_fault *)arg2;
	$vdso_image = (struct vdso_image*)($vma->vm_mm->context.vdso_image);
	$kaddr = $vdso_image->data + ($vmf->pgoff << PAGE_SHIFT);
	
	/**
	 * VMA start-end is same as `sudo cat /proc/[PID]/maps | grep vdso`
	 */
	printf("%-8d %-16s %-16lx %-16lx %-16lx\n",
		 tid, comm, $kaddr, $vma->vm_start, $vma->vm_end);

	/**
	 * @vdso_fault[
	 *     vdso_fault+1
	 *     __do_fault+51
	 *     do_read_fault+230
	 *     do_fault+197
	 *     __handle_mm_fault+971
	 *     handle_mm_fault+197
	 *     do_user_addr_fault+443
	 *     exc_page_fault+98
	 *     asm_exc_page_fault+30
	 * ]: 13
	*/
	@vdso_fault[kstack] = count();
}

END
{
	printf("Bye.\n");
}
